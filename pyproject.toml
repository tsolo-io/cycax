# SPDX-FileCopyrightText: 2025 Tsolo.io
#
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cycax"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10.0, <3.14"

license = "Apache-2.0"
keywords = ["CAD", "CyCAx"]
authors = [
    { name = "Helen Forbes", email = "helen@tsolo.io" },
    { name = "Martin Slabber", email = "martin@tsolo.io" },
]
maintainers = [
    { name = "Helen Forbes", email = "helen@tsolo.io" },
    { name = "Martin Slabber", email = "martin@tsolo.io" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "httpx==0.28.1",
    "tenacity==9.1.2",
    "matplotlib==3.10.6",
    "pytest",
    "build123d==0.9.1",
    "numpy-stl==3.2.0",
    "xxhash==3.5.0",
    "rich==14.1.0",
    "typer==0.19.2",
    "pydantic==2.11.9",
    "pydantic-settings==2.11.0",
]

[project.scripts]
cycax = "cycax.cli.main:app"

[project.urls]
Documentation = "https://github.com/tsolo-dev/cycax#readme"
Issues = "https://github.com/tsolo-dev/cycax/issues"
Source = "https://github.com/tsolo-dev/cycax"

[tool.hatch.version]
path = "src/cycax/__about__.py"

[tool.hatch.envs.default]
dependencies = []


[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.6.21",
    "mkdocstrings[python]==0.30.1",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8003"

[tool.hatch.envs.lint]
detached = true
dependencies = ["mypy==1.18.2", "ruff==0.13.2", "typos==1.37.0"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/cycax tests}"
style = ["ruff check --fix {args:.}"]
spell = "typos {args:.}"
fmt = ["ruff format {args:.}", "style"]
all = ["style", "typing"]

[tool.typos.default.extend-words]
Pn = "Pn"

[tool.ruff]
target-version = "py310"
line-length = 120
lint.select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    "S603",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
lint.unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["cycax"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["cycax", "tests"]
branch = true
parallel = true
omit = ["src/cycax/__about__.py"]

[tool.coverage.paths]
cycax = ["src/cycax", "*/cycax/src/cycax"]
tests = ["tests", "*/cycax/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "ci_exclude: marks tests as not to run on CI (deselect with '-m \"not ci_exclude\"')",
    "serial",
]

[tool.hatch.envs.testing]
extra-dependencies = [
    "coverage[toml]>=6.5",
    "pytest>=8.3.4",
    "pytest-bdd>=7.2.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov",
    "pytest-md-report"
]
installer = "uv"

[tool.hatch.envs.testing.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
test-not-slow = "pytest -m \"not slow\" --exitfirst {args:tests}"
test-ci = "coverage run -m pytest -m \"not ci_exclude\" --junitxml=reports/tests.xml {args:tests} --cov=cycax --cov-report=markdown:docs/content/coverage_report.md --md-report --md-report-verbose=1 --md-report-output=docs/content/detailed_report.md"
cov-report = [
    "- coverage combine",
    "coverage report",
    "coverage xml -o reports/coverage.xml",
]
cov = ["test-cov", "cov-report"]
ci = ["test-ci", "cov-report"]

# Editor helper
[tool.pyright]
executionEnvironments = [{ root = "." }]
venvPath = ".hatch"
venv = "lint"
